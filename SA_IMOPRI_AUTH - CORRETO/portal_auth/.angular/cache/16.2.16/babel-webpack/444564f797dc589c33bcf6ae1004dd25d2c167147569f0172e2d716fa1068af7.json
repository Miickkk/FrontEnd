{"ast":null,"code":"import { map, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:3004/clientes';\n    this.CHAVE_AUTH = 'clienteLogado';\n  }\n  // Registrar novo cliente\n  registrar(cliente) {\n    return this.http.get(`${this.apiUrl}?email=${cliente.email}`).pipe(switchMap(res => {\n      if (res.length > 0) {\n        return throwError(() => new Error('Cliente já cadastrado'));\n      }\n      return this.http.post(this.apiUrl, cliente);\n    }));\n  }\n  // Login\n  login(credenciais) {\n    const corretor = {\n      id: '1',\n      nome: 'Corretor',\n      email: 'corretor@rh.connect.com',\n      senha: 'corretor1234',\n      permissao: 'corretor'\n    };\n    return this.http.get(this.apiUrl).pipe(map(clientes => {\n      // Verificar se é o corretor\n      if (credenciais.email === corretor.email && credenciais.senha === corretor.senha) {\n        localStorage.setItem(this.CHAVE_AUTH, JSON.stringify(corretor));\n        return corretor;\n      }\n      // Procurar cliente normal\n      const cliente = clientes.find(c => c.email === credenciais.email && c.senha === credenciais.senha);\n      if (cliente) {\n        localStorage.setItem(this.CHAVE_AUTH, JSON.stringify(cliente));\n        return cliente;\n      }\n      return null;\n    }));\n  }\n  // Logout\n  logout() {\n    localStorage.removeItem(this.CHAVE_AUTH);\n    this.router.navigate(['/interna']);\n  }\n  // Verifica se o cliente está autenticado\n  estaAutenticado() {\n    return !!localStorage.getItem(this.CHAVE_AUTH);\n  }\n  // Retorna o cliente logado\n  clienteAtual() {\n    return JSON.parse(localStorage.getItem(this.CHAVE_AUTH) || 'null');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","switchMap","throwError","AuthService","constructor","router","http","apiUrl","CHAVE_AUTH","registrar","cliente","get","email","pipe","res","length","Error","post","login","credenciais","corretor","id","nome","senha","permissao","clientes","localStorage","setItem","JSON","stringify","find","c","logout","removeItem","navigate","estaAutenticado","getItem","clienteAtual","parse","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DEVCASTELLOB\\Documents\\Anick\\FrontEnd\\FrontEnd\\SA_IMOPRI_AUTH - CORRETO\\portal_auth\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { map, Observable, switchMap, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3004/clientes';\r\n  private readonly CHAVE_AUTH = 'clienteLogado';\r\n\r\n  constructor(private router: Router, private http: HttpClient) {}\r\n\r\n  // Registrar novo cliente\r\n  registrar(cliente: any): Observable<any> {\r\n    return this.http.get<any[]>(`${this.apiUrl}?email=${cliente.email}`).pipe(\r\n      switchMap((res) => {\r\n        if (res.length > 0) {\r\n          return throwError(() => new Error('Cliente já cadastrado'));\r\n        }\r\n        return this.http.post<any>(this.apiUrl, cliente);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Login\r\n  login(credenciais: { email: string; senha: string }): Observable<any> {\r\n    const corretor = {\r\n      id: '1',\r\n      nome: 'Corretor',\r\n      email: 'corretor@rh.connect.com',\r\n      senha: 'corretor1234',\r\n      permissao: 'corretor',\r\n    };\r\n\r\n    return this.http.get<any[]>(this.apiUrl).pipe(\r\n      map((clientes) => {\r\n        // Verificar se é o corretor\r\n        if (\r\n          credenciais.email === corretor.email &&\r\n          credenciais.senha === corretor.senha\r\n        ) {\r\n          localStorage.setItem(this.CHAVE_AUTH, JSON.stringify(corretor));\r\n          return corretor;\r\n        }\r\n\r\n        // Procurar cliente normal\r\n        const cliente = clientes.find(\r\n          (c) => c.email === credenciais.email && c.senha === credenciais.senha\r\n        );\r\n\r\n        if (cliente) {\r\n          localStorage.setItem(this.CHAVE_AUTH, JSON.stringify(cliente));\r\n          return cliente;\r\n        }\r\n\r\n        return null;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Logout\r\n  logout(): void {\r\n    localStorage.removeItem(this.CHAVE_AUTH);\r\n    this.router.navigate(['/interna']);\r\n  }\r\n\r\n  // Verifica se o cliente está autenticado\r\n  estaAutenticado(): boolean {\r\n    return !!localStorage.getItem(this.CHAVE_AUTH);\r\n  }\r\n\r\n  // Retorna o cliente logado\r\n  clienteAtual(): any {\r\n    return JSON.parse(localStorage.getItem(this.CHAVE_AUTH) || 'null');\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;;AAK7D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,IAAI,GAAJA,IAAI;IAHxC,KAAAC,MAAM,GAAG,gCAAgC;IAChC,KAAAC,UAAU,GAAG,eAAe;EAEkB;EAE/D;EACAC,SAASA,CAACC,OAAY;IACpB,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,UAAUG,OAAO,CAACE,KAAK,EAAE,CAAC,CAACC,IAAI,CACvEZ,SAAS,CAAEa,GAAG,IAAI;MAChB,IAAIA,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE;QAClB,OAAOb,UAAU,CAAC,MAAM,IAAIc,KAAK,CAAC,uBAAuB,CAAC,CAAC;;MAE7D,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAM,IAAI,CAACV,MAAM,EAAEG,OAAO,CAAC;IAClD,CAAC,CAAC,CACH;EACH;EAEA;EACAQ,KAAKA,CAACC,WAA6C;IACjD,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,UAAU;MAChBV,KAAK,EAAE,yBAAyB;MAChCW,KAAK,EAAE,cAAc;MACrBC,SAAS,EAAE;KACZ;IAED,OAAO,IAAI,CAAClB,IAAI,CAACK,GAAG,CAAQ,IAAI,CAACJ,MAAM,CAAC,CAACM,IAAI,CAC3Cb,GAAG,CAAEyB,QAAQ,IAAI;MACf;MACA,IACEN,WAAW,CAACP,KAAK,KAAKQ,QAAQ,CAACR,KAAK,IACpCO,WAAW,CAACI,KAAK,KAAKH,QAAQ,CAACG,KAAK,EACpC;QACAG,YAAY,CAACC,OAAO,CAAC,IAAI,CAACnB,UAAU,EAAEoB,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,CAAC;QAC/D,OAAOA,QAAQ;;MAGjB;MACA,MAAMV,OAAO,GAAGe,QAAQ,CAACK,IAAI,CAC1BC,CAAC,IAAKA,CAAC,CAACnB,KAAK,KAAKO,WAAW,CAACP,KAAK,IAAImB,CAAC,CAACR,KAAK,KAAKJ,WAAW,CAACI,KAAK,CACtE;MAED,IAAIb,OAAO,EAAE;QACXgB,YAAY,CAACC,OAAO,CAAC,IAAI,CAACnB,UAAU,EAAEoB,IAAI,CAACC,SAAS,CAACnB,OAAO,CAAC,CAAC;QAC9D,OAAOA,OAAO;;MAGhB,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACAsB,MAAMA,CAAA;IACJN,YAAY,CAACO,UAAU,CAAC,IAAI,CAACzB,UAAU,CAAC;IACxC,IAAI,CAACH,MAAM,CAAC6B,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;EACpC;EAEA;EACAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAACT,YAAY,CAACU,OAAO,CAAC,IAAI,CAAC5B,UAAU,CAAC;EAChD;EAEA;EACA6B,YAAYA,CAAA;IACV,OAAOT,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACU,OAAO,CAAC,IAAI,CAAC5B,UAAU,CAAC,IAAI,MAAM,CAAC;EACpE;;;uBApEWL,WAAW,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXzC,WAAW;MAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}